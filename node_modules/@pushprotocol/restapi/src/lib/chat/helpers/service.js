"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMessagesService = exports.getConversationHashService = exports.upgradeUserService = exports.createUserService = void 0;
const tslib_1 = require("tslib");
const axios_1 = require("axios");
const constants_1 = require("../../constants");
const helpers_1 = require("../../helpers");
const crypto_1 = require("./crypto");
const createUserService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { user, wallet, publicKey = '', encryptedPrivateKey = '', encryptionType = '', env = constants_1.default.ENV.PROD, encryptedPassword = null, nftOwner = null, } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v1/users/`;
    const data = {
        caip10: user,
        did: user,
        publicKey,
        encryptedPrivateKey,
        encryptionType,
        name: '',
        encryptedPassword: encryptedPassword,
        nftOwner: nftOwner,
    };
    const hash = (0, helpers_1.generateHash)(data);
    const signatureObj = yield (0, crypto_1.getEip191Signature)(wallet, hash);
    const body = Object.assign(Object.assign({}, data), signatureObj);
    return axios_1.default
        .post(requestUrl, body)
        .then((response) => {
        if (response.data)
            response.data.publicKey = (0, helpers_1.verifyPGPPublicKey)(response.data.encryptionType, response.data.publicKey, response.data.did, response.data.nftOwner);
        return response.data;
    })
        .catch((err) => {
        console.error(`[Push SDK] - API ${requestUrl}: `, err);
        throw Error(`[Push SDK] - API ${requestUrl}: ${err}`);
    });
});
exports.createUserService = createUserService;
const upgradeUserService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { user, wallet, publicKey = '', encryptedPrivateKey = '', encryptionType = '', name = '', encryptedPassword = null, nftOwner = null, env = constants_1.default.ENV.PROD, } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v1/users/users/${(0, helpers_1.walletToPCAIP10)(user)}`;
    const data = {
        caip10: (0, helpers_1.walletToPCAIP10)(user),
        publicKey,
        encryptedPrivateKey,
        encryptionType,
        name: name,
        encryptedPassword: encryptedPassword,
        nftOwner: nftOwner,
    };
    const hash = (0, helpers_1.generateHash)(data);
    const signatureObj = yield (0, crypto_1.getEip191Signature)(wallet, hash);
    const body = Object.assign(Object.assign({}, data), signatureObj);
    return axios_1.default
        .put(requestUrl, body)
        .then((response) => {
        if (response.data)
            response.data.publicKey = (0, helpers_1.verifyPGPPublicKey)(response.data.encryptionType, response.data.publicKey, response.data.did, response.data.nftOwner);
        return response.data;
    })
        .catch((err) => {
        console.error(`[Push SDK] - API ${requestUrl}: `, err);
        throw Error(`[Push SDK] - API ${requestUrl}: ${err}`);
    });
});
exports.upgradeUserService = upgradeUserService;
const getConversationHashService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { conversationId, account, env = constants_1.default.ENV.PROD } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const requestUrl = `${API_BASE_URL}/v1/chat/users/${(0, helpers_1.walletToPCAIP10)(account)}/conversations/${conversationId}/hash`;
    return axios_1.default
        .get(requestUrl)
        .then((response) => {
        return response.data;
    })
        .catch((err) => {
        throw new Error(err);
    });
});
exports.getConversationHashService = getConversationHashService;
const getMessagesService = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { threadhash, limit, env = constants_1.default.ENV.PROD } = options || {};
    const API_BASE_URL = (0, helpers_1.getAPIBaseUrls)(env);
    const apiEndpoint = `${API_BASE_URL}/v1/chat/conversationhash/${threadhash}`;
    const queryObj = {
        fetchLimit: limit,
    };
    const requestUrl = `${apiEndpoint}?${(0, helpers_1.getQueryParams)(queryObj)}`;
    return axios_1.default
        .get(requestUrl)
        .then((response) => {
        return response.data;
    })
        .catch((err) => {
        throw new Error(err);
    });
});
exports.getMessagesService = getMessagesService;
//# sourceMappingURL=service.js.map