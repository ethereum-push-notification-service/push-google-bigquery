"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgrade = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../chat/helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../helpers");
const getUser_1 = require("./getUser");
const upgrade = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { env = constants_1.default.ENV.PROD, account = null, signer = null, progressHook, } = options || {};
    if (signer == null) {
        throw new Error(`Signer is necessary!`);
    }
    const wallet = (0, helpers_1.getWallet)({ account, signer });
    const address = yield (0, helpers_1.getAccountAddress)(wallet);
    if (!(0, helpers_2.isValidETHAddress)(address)) {
        throw new Error(`Invalid address!`);
    }
    const user = yield (0, getUser_1.get)({ account: address, env: env });
    // User not created or already upgraded
    if (!user || user.encryptionType === constants_1.default.ENC_TYPE_V3) {
        return user;
    }
    const caip10 = (0, helpers_2.walletToPCAIP10)(address);
    const encryptionType = constants_1.default.ENC_TYPE_V3;
    // Report Progress
    progressHook === null || progressHook === void 0 ? void 0 : progressHook({
        progressId: 'PUSH-UPGRADE-01',
        progressTitle: 'Generating New Profile Signature',
        progressInfo: 'Trying to Upgrade Push Chat Keys to latest version. Please sign the message to continue.',
        level: 'INFO',
    });
    const publicKey = yield (0, helpers_2.preparePGPPublicKey)(encryptionType, user.publicKey, wallet);
    // Report Progress
    progressHook === null || progressHook === void 0 ? void 0 : progressHook({
        progressId: 'PUSH-UPGRADE-02',
        progressTitle: 'Decrypting Old Profile',
        progressInfo: 'Trying to Upgrade Push Chat Keys to latest version. Please sign the message to continue.',
        level: 'INFO',
    });
    const privateKey = yield (0, helpers_2.decryptPGPKey)({
        encryptedPGPPrivateKey: user.encryptedPrivateKey,
        account: address,
        signer: signer,
        env,
        toUpgrade: false,
    });
    // Report Progress
    progressHook === null || progressHook === void 0 ? void 0 : progressHook({
        progressId: 'PUSH-UPGRADE-03',
        progressTitle: 'Generating Encrypted New Profile',
        progressInfo: 'Trying to Upgrade Push Chat Keys to latest version. Encrypting Push Chat Keys with latest version. Please sign the message to continue.',
        level: 'INFO',
    });
    const encryptedPrivateKey = yield (0, helpers_2.encryptPGPKey)(encryptionType, privateKey, address, wallet);
    const body = {
        user: caip10,
        wallet,
        name: user.name ? user.name : '',
        encryptedPassword: user.encryptedPassword,
        nftOwner: user.nftOwner,
        publicKey: publicKey,
        encryptedPrivateKey: JSON.stringify(encryptedPrivateKey),
        encryptionType: encryptionType,
        env,
    };
    // Report Progress
    progressHook === null || progressHook === void 0 ? void 0 : progressHook({
        progressId: 'PUSH-UPGRADE-04',
        progressTitle: 'Syncing New Profile',
        progressInfo: 'Please sign the message to continue. Steady lads, chat is almost ready!',
        level: 'INFO',
    });
    const upgradedUser = yield (0, helpers_1.upgradeUserService)(body);
    // Report Progress
    progressHook === null || progressHook === void 0 ? void 0 : progressHook({
        progressId: 'PUSH-UPGRADE-05',
        progressTitle: 'Upgrade Completed, Welcome to Push Chat',
        progressInfo: '',
        level: 'SUCCESS',
    });
    return upgradedUser;
});
exports.upgrade = upgrade;
//# sourceMappingURL=upgradeUser.js.map