"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptNFTProfile = void 0;
const tslib_1 = require("tslib");
const constants_1 = require("../constants");
const helpers_1 = require("../helpers");
const decryptNFTProfile = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { encryptedPGPPrivateKey, encryptedPassword = null, decryptedPassword = null, signer = null, env = constants_1.default.ENV.PROD, progressHook, } = options || {};
    try {
        let privateKey = '';
        let decryptionTry1 = false;
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-DECRYPT-01',
            progressTitle: 'Decrypting Profile',
            progressInfo: 'Please sign the transaction to decrypt profile',
            level: 'INFO',
        });
        // try decrypting pgp keys from decryptedPassword
        if (decryptedPassword) {
            try {
                const encodedPrivateKey = yield (0, helpers_1.decryptV2)(JSON.parse(encryptedPGPPrivateKey), (0, helpers_1.hexToBytes)((0, helpers_1.stringToHex)(decryptedPassword)));
                const dec = new TextDecoder();
                privateKey = dec.decode(encodedPrivateKey);
                decryptionTry1 = true;
            }
            catch (err) {
                // Report Progress
                progressHook === null || progressHook === void 0 ? void 0 : progressHook({
                    progressId: 'PUSH-ERROR-01',
                    progressTitle: 'Decrypt Profile Failed',
                    progressInfo: `[Push SDK] - API  - Error - API decrypt Pgp Key() -: ${err}`,
                    level: 'WARN',
                });
            }
        }
        if (!decryptionTry1) {
            if (signer === null || encryptedPassword === null) {
                throw new Error('Unable To decrypt Profile!');
            }
            const password = yield (0, helpers_1.decryptPGPKey)({
                encryptedPGPPrivateKey: encryptedPassword,
                signer,
                env,
            });
            const encodedPrivateKey = yield (0, helpers_1.decryptV2)(JSON.parse(encryptedPGPPrivateKey), (0, helpers_1.hexToBytes)((0, helpers_1.stringToHex)(password)));
            const dec = new TextDecoder();
            privateKey = dec.decode(encodedPrivateKey);
        }
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-DECRYPT-02',
            progressTitle: 'Push Profile Unlocked',
            progressInfo: 'Unlocking push profile',
            level: 'SUCCESS',
        });
        return privateKey;
    }
    catch (err) {
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-ERROR-00',
            progressTitle: 'Non Specific Error',
            progressInfo: `[Push SDK] - API  - Error - API decrypt Pgp Key() -: ${err}`,
            level: 'ERROR',
        });
        console.error(`[Push SDK] - API  - Error - API decrypt Pgp Key() -:  `, err);
        throw Error(`[Push SDK] - API  - Error - API decrypt Pgp Key() -: ${err}`);
    }
});
exports.decryptNFTProfile = decryptNFTProfile;
//# sourceMappingURL=decryptNFTProfile.js.map