"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgradeNFTProfile = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../chat/helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../helpers");
const getNFTProfile_1 = require("./getNFTProfile");
const decryptNFTProfile_1 = require("./decryptNFTProfile");
const upgradeNFTProfile = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { env = constants_1.default.ENV.PROD, account = null, signer, currentPassword = null, newPassword, did, progressHook, } = options || {};
    try {
        if (signer === null || newPassword === null || did === null) {
            throw new Error(`Invalid Params Passed!`);
        }
        const wallet = (0, helpers_1.getWallet)({ account, signer });
        const address = yield (0, helpers_1.getAccountAddress)(wallet);
        if (!(0, helpers_2.isValidETHAddress)(address)) {
            throw new Error(`Invalid address!`);
        }
        const user = yield (0, getNFTProfile_1.getNFTProfile)({
            did,
            env: env,
        });
        if (user === null) {
            throw new Error('Profile not Found!');
        }
        const encryptionType = constants_1.default.ENC_TYPE_V3;
        const privateKey = yield (0, decryptNFTProfile_1.decryptNFTProfile)({
            encryptedPGPPrivateKey: user.encryptedPrivateKey,
            decryptedPassword: currentPassword,
            env,
        });
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-UPGRADE-01',
            progressTitle: 'Generating New Profile Signature',
            progressInfo: 'Trying to Upgrade Push Chat Keys to latest version. Please sign the message to continue.',
            level: 'INFO',
        });
        const publicKey = yield (0, helpers_2.preparePGPPublicKey)(encryptionType, user.publicKey, wallet);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-UPGRADE-02',
            progressTitle: 'Decrypting Old Profile',
            progressInfo: 'Trying to Upgrade Push Chat Keys to latest version. Please sign the message to continue.',
            level: 'INFO',
        });
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-UPGRADE-03',
            progressTitle: 'Generating Encrypted New Profile',
            progressInfo: 'Trying to Upgrade Push Chat Keys to latest version. Encrypting Push Chat Keys with latest version. Please sign the message to continue.',
            level: 'INFO',
        });
        // encrypt priv key with password
        const enc = new TextEncoder();
        const encodedPrivateKey = enc.encode(privateKey);
        const encryptedPrivateKey = yield (0, helpers_2.encryptV3)(encodedPrivateKey, (0, helpers_2.hexToBytes)(newPassword));
        // encrypt password instead of priv key
        const encryptedPassword = yield (0, helpers_2.encryptPGPKey)(encryptionType, newPassword, address, wallet);
        const body = {
            user: did,
            wallet,
            publicKey: publicKey,
            encryptedPrivateKey: JSON.stringify(encryptedPrivateKey),
            encryptionType: encryptionType,
            encryptedPassword: JSON.stringify(encryptedPassword),
            nftOwner: (0, helpers_2.walletToPCAIP10)(address),
            env,
        };
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-UPGRADE-04',
            progressTitle: 'Syncing New Profile',
            progressInfo: 'Please sign the message to continue. Steady lads, chat is almost ready!',
            level: 'INFO',
        });
        const upgradedUser = yield (0, helpers_1.upgradeUserService)(body);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-UPGRADE-05',
            progressTitle: 'Upgrade Completed, Welcome to Push Chat',
            progressInfo: '',
            level: 'SUCCESS',
        });
        return upgradedUser;
    }
    catch (err) {
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-ERROR-00',
            progressTitle: 'Non Specific Error',
            progressInfo: `[Push SDK] - API  - Error - API upgradeNFTProfile() -: ${err}`,
            level: 'ERROR',
        });
        throw Error(`[Push SDK] - API  - Error - API upgradeNFTProfile() -: ${err}`);
    }
});
exports.upgradeNFTProfile = upgradeNFTProfile;
//# sourceMappingURL=upgradeNFTProfile.js.map