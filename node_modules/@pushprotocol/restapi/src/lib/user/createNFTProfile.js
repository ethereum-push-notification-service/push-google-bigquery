"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNFTProfile = void 0;
const tslib_1 = require("tslib");
const helpers_1 = require("../chat/helpers");
const constants_1 = require("../constants");
const helpers_2 = require("../helpers");
const createNFTProfile = (options) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const { env = constants_1.default.ENV.PROD, account = null, signer, did, progressHook, } = options || {};
    let { password = null } = options || {};
    try {
        if (password === null) {
            password = (0, helpers_1.generateRandomSecret)(10);
        }
        if (signer === null || password === null || did === null) {
            throw new Error(`Invalid Params Passed!`);
        }
        const wallet = (0, helpers_1.getWallet)({ account, signer });
        const address = yield (0, helpers_1.getAccountAddress)(wallet);
        if (!(0, helpers_2.isValidETHAddress)(address)) {
            throw new Error(`Invalid address!`);
        }
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-CREATE-01',
            progressTitle: 'Generating Secure Profile Signature',
            progressInfo: 'This step is only done for first time users and might take a few seconds. PGP keys are getting generated to provide you with secure yet seamless chat',
            level: 'INFO',
        });
        const keyPairs = yield (0, helpers_1.generateKeyPair)();
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-CREATE-02',
            progressTitle: 'Signing Generated Profile',
            progressInfo: 'This step is only done for first time users. Please sign the message to continue.',
            level: 'INFO',
        });
        const encryptionType = constants_1.default.ENC_TYPE_V3;
        const publicKey = yield (0, helpers_2.preparePGPPublicKey)(encryptionType, keyPairs.publicKeyArmored, wallet);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-CREATE-03',
            progressTitle: 'Encrypting Generated Profile',
            progressInfo: 'Encrypting your keys. Please sign the message to continue.',
            level: 'INFO',
        });
        // encrypt priv key with password
        const enc = new TextEncoder();
        const encodedPrivateKey = enc.encode(keyPairs.privateKeyArmored);
        const encryptedPrivateKey = yield (0, helpers_2.encryptV3)(encodedPrivateKey, (0, helpers_2.hexToBytes)((0, helpers_2.stringToHex)(password)));
        // encrypt password instead of priv key
        const encryptedPassword = yield (0, helpers_2.encryptPGPKey)(encryptionType, password, address, wallet);
        const body = {
            user: did,
            wallet,
            publicKey: publicKey,
            encryptedPrivateKey: JSON.stringify(encryptedPrivateKey),
            encryptionType: encryptionType,
            encryptedPassword: JSON.stringify(encryptedPassword),
            nftOwner: (0, helpers_2.walletToPCAIP10)(address),
            env,
        };
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-CREATE-04',
            progressTitle: 'Syncing Generated Profile',
            progressInfo: 'Please sign the message to continue. Steady lads, chat is almost ready!',
            level: 'INFO',
        });
        const createdUser = yield (0, helpers_1.createUserService)(body);
        // Report Progress
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-CREATE-05',
            progressTitle: 'Setup Complete',
            progressInfo: '',
            level: 'SUCCESS',
        });
        return createdUser;
    }
    catch (err) {
        progressHook === null || progressHook === void 0 ? void 0 : progressHook({
            progressId: 'PUSH-ERROR-00',
            progressTitle: 'Non Specific Error',
            progressInfo: `[Push SDK] - API  - Error - API createNFTProfile() -: ${err}`,
            level: 'ERROR',
        });
        throw Error(`[Push SDK] - API  - Error - API createNFTProfile() -: ${err}`);
    }
});
exports.createNFTProfile = createNFTProfile;
//# sourceMappingURL=createNFTProfile.js.map